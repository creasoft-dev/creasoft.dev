[
  
    {
      "title": "Publica un sitio web al GitLab pages, sin costo",
      "lang": "es",
      "tags": "post,despliegue",
      "url": "/es/posts/2020/2020-07-03-publicar-gitlabpages/",
      "keywords": "website, gitlab",
      "objectID": "/es/posts/2020/2020-07-03-publicar-gitlabpages/",
      "content": "&quot;\n\nNOTA antes de empezar: Los servicios utilizados en este ejercicio - excepto el nombre de dominio -\nno conlleva costo, así que tome ventaja de los servicios!\n\nExisten varias opciones para publicar sitios web en internet. En el principio, la publicación del\nsitio web consistía en crear páginas estáticas HTML y copiar los archivos a un servidor\naccesible por internet.  Luego con la venida de lenguajes como perl y python, con facilidad de\nprocesar plantillas, y luego con lenguajes que procesan hipertextos como PHP, ASP y JSP, la\ntendencia era de alquilar un hosting y publicar los sitios web con páginas dinámicas en un lugar\nprovisto por el proveedor de hosting.\nHoy día, se está popularizando nuevamente el despliegue (deployment) de páginas estáticas, o\nmás bien pre-renderizadas, a una plataforma CDN (Content Delivery Network). Este nuevo\nparadigma es llamado JAMstack por las siglas de JavaScript, APIs,\ny Markup.\nExisten varios proveedores de CDN como Netlify, Vercel entre otros. La publicación en plan básico\nes gratuito en ambas plataformas. La otra alternativa es de publicar en el git hosting como\nGitLab o GitHub.\nEn este artículo mostraremos cómo publicar una sitio en GitLab Pages.\nAl final del ejercicio, usted tendrá una página accesible en el internet por el url\nhttps://&amp;lt;su-cuenta&amp;gt;.gitlab.io/&amp;lt;su-proyecto&amp;gt;.  Si tiene su propio dominio, enlazaremos el dominio\na la página.\nRequisitos\n\nConocimiento básico de git\nCuenta en GitLab\ngit instalado en su computadora\neditor de texto, si no tiene una, sugerimos VS Code\n\nPreparando proyecto en GitLab\nLo primero que haremos es crear un proyecto en GitLab.\n\nDiríjase el gitlab.com y presione el botón New Project\nSeleccione &amp;quot;Create Blank Project&amp;quot;\nIntroduzca los datos en el formulario. Le pondremos el nombre &amp;quot;ejemplo-página&amp;quot;. Abajo, seleccione &amp;quot;Initialize repository with README&amp;quot;\nPresione el botón &amp;quot;Create Project&amp;quot;\n\n\nNota: Si no tiene git instalado en su máquina, usted puede realizar este ejercicio utilizando\nel editor (Web IDE) del GitLab.\n\nAhora clonearemos el repositorio en el directorio local, y dirigiremos al directorio creado:\n\nSi usted le puso un nombre diferente al proyecto, reemplace ejemplo-página por el nombre que le puso.\nCon un editor de texto, crea un directorio llamado public y dentro de ella crea un archivo\nllamado index.html.\n\nAhora en directori raíz, crea un el archivo .gitlab-ci.yml con el siguiente contenido.\n\nAhora en el terminal agregaremos los cambios al git cometeremos los cambios.\n$ git add .\n$ git commit -am &amp;quot;Primer cometido&amp;quot;\n$ git push\n\nLo agradable del GitLab es que incluye CI (Integración Contínua). Tan sólo agregar un archivo en\nel directorio raíz el archivo .gitlab-ci.yml GitLab ejecutará automáticamente el CI worker.\nAsí es como su página se instalará en el sitio de GitLab pages.\nSi quiere ver los ejemplos, explore el repositorio\nhttps://gitlab.com/creasoft-dev/ejemplos/ejemplo-página\nTambién podrá visitar la página https://creasoft-dev.gitlab.io/ejemplos/ejemplo-página/\nPasos siguientes: mejoras\nHay un montón de mejoras que se puede hacer al sitio:\n\nUtilizar un motor de SSG (Static Site Generator) para generar páginas desde códigos en Markdown.\nUtilizar CSS framework como Bootstrap, Material UI, Tailwind, etc.\nAgregar comentarios\n\nPara los curiosos, el sitio web de CreaSoft.dev utiliza:\n\nEleventy como SSG\neleventy-plugin-syntaxhighlight para formatear códigos fuentes\nTailwind como CSS framework\n\nEnlazando su nombre de domino a la página de GitLab\nEsta sección mostrará cómo enlazar su dominio, ej. mi-super-dominio.com a la página recién publicada.\nPreparando GitLab Pages para aceptar mi propio dominio.\n\nDiríjase s su proyecto en Gitlab.com, vaya al menú lateral: Setting &amp;gt; Pages y presione el botón New Domain\nAparecerá el formulario titulado &amp;quot;New Pages Domain&amp;quot;, en el campo Domain introduzca el nombre de su dominio, por ejemplo: mi-super-domain.com. Cerciórese de mantener la opción de Certificate  habilitado a Let&#39;s Encrypt para que genere certificado SSL gratuito.\nPresione el botón Create New Domain\nCuando muestre la página Pages Domain, copie en la memoria (Control-V) el dato que muestra en la sección de Verification status\n\nConfigurando el registro de dominio para asociar en GitLab\n\nDiríjase a su registro de dominio. En mi caso utilizo domains.google.com.\nVaya a la página de configuración del DNS.\nEn el &amp;quot;custom resource records&amp;quot; introduzca\n\nName: -vacio-\nType: A\nTTL: 1H\nData: 35.185.44.232 --&amp;gt; este es el IP como indicado en el documento de GitLab\n\n\nEn el &amp;quot;custom resource records&amp;quot; introduzca\n\nName: -vacio-\nType: TXT\nTTL: 1m\nData: &amp;lt;La copia del &#39;Verification status&#39;&amp;gt;\n\n\nVaya a la página de GitLab Setting &amp;gt; Pages y en la sección de Verification status presione el botón circular a la derecha de la etiqueta roja Unverified. Si los pasos anteriores fueron correctos, la etiqueta cambiará a color verde.\n\nDependiendo del tiempo de sincronización de los DNS, puede tardar entre una a varias horas para que el\nnombre del dominio apunte al GitLab y que el certificado se instale correctamente.\nEspere que el URL del nuevo domain muestre https (nótese la letra s de seguridad).\n¡Disfrute de su nueva presencia (sin costo) en el internet!\n&quot;"
    },
  
    {
      "title": "Fundamenty - Building an Eleventy Starter Project [Part 1: Multilingual, SEO-Friendly]",
      "lang": "en",
      "tags": "post,general",
      "url": "/en/posts/2020/2020-07-21-fundamenty-building-eleeventy-starter-project-1/",
      "keywords": "website, eleventy",
      "objectID": "/en/posts/2020/2020-07-21-fundamenty-building-eleeventy-starter-project-1/",
      "content": "&quot;\nCheck the Fundamenty project live, or try it locally by cloning this repo.\n\nI first tried Eleventy for my personal website about a month ago, and it became my Static Site Generator (SSG) of choice.\nPreviously at my work, I had evaluated several other SSGs: Docsify, Docusaurs, Gatsby, GitBook, Hugo, mdBook, and mkdocs. The purpose of the evaluation was to choose a tool to generate technical documentation for our code repose, following the philosophy of Docs as Code. I ended up choosing mkdocs, mainly because of the short learning curve.\nEleventy was the only one on top 10 in SSG (at the moment of evaluation) that I hadn’t tried before, primarily because it hasn’t reached version 1.0 yet (it is still on version 0.11.0 at the moment of this writing). Nonetheless, I started bumping into articles praising Eleventy.\nA month ago I decided to migrate my personal page that was running on a PHP-based CMS to a GitLab Pages (Yes, free hosting! Thanks GitLab for saving me $20/month on hosting). I needed a static page, and mkdocs or any other documentation-oriented SSG such as nkBook and gitbook would not do the job, its template is too restrictive. I hesitated in between Gatsby, Next with static site generation, but ultimately decided to give Eleventy a try.\nI enjoyed it a lot!\nIt is very flexible, it supports multiple template engines; it is extensible, you can just use any JS library; it is simple and elegant.\nOnce I finished with my personal I had two other sites in the queue, including this one.\nFew requirements I had for the sites are:\n\nMulti-language support - I will be  publishing in English, Spanish and Korean.\nSEO-friendly - Generate proper meta data, and robots, sitemap.xml files\nSearch - The pages should be searchable, part of UX requirement.\nAnalytics - I need to analyze the page visit statistics, so I can use as feedback for content improvement\nSyntax highlighting - The content will include coding, I needed syntax highlighting for different languages.\nAutomated deploy to GitLab Pages - Continuous Deployment for rapid cycle.\n\nI looked for Eleventy Starter Project that fits - or approximates - my requirements. I found projects with pieces but not one that met all the requirements, so I went ahead and built one: Fundamenty! Combining the words Fun, Fundamental and Eleventy!\nThe gist:\n\nMulti-language support - through directory structure per locale\nSEO-friendly - Generating robots, sitemap.xml files\nSearch - Integrating with Algolia\nAnalytics - Integrating with Google Analytics\nSyntax highlighting - Adding Prism\nAutomated deploy to GitLab Pages - Using GitLab-CI\n\nIn addition, I included\n\nAutomated deploy to GitLab Pages - Using GitHub Actions\nEdit on GitLab / GitHub\nComments - Integrating with Disqus\n\nIn this post, I will go over the implementation of top two features.\nThe Underlyings\nBesides Eleventy 0.11, Fundamenty uses TailwindCSS as CSS framework and Webpack for bundling.\nIf not explicitly mentioned, I will be using Nunjuck template for Elventy.\nTailwind styles for markdown\nFor the Eleventy and Tailwind setup, I followed this nice article from statickit.\nThen I had to add the following styles for the tags generated by markdown:\n\nBecause the style applies not only to the markdown generated elements but for all other elements in the layout, I had to override those that, e.g. the navigation menu uses &amp;lt;ul&amp;gt;, but shouldn’t be rendered with bullets, I had to add list-none.\nI have not found a good way to add a class to all elements generated from markdown. I would need something like markdown-it-attrs but that includes a class for all elements by default.\nI also configured tailwind.config.js to enable css purge for production build\n\nWebpack\nFor Eleventy and Webpack configuration, I followed this nice guid from statickit.\nThen I added support for dotenv by modifying webpack.config.js:\n\nMulti-language support\nThe most natural way of implementing multi-language support is through directory per language (I will be using language and locale interchangeably).\nAll the source code is under ./src directory. The multi-language relevant files and directories are shown below:\n\nDefining the Active Languages and Resource Bundles\nUnder _data directory, the default 11ty’s data directory, includes sites.js data file that contains definition of list of active languages and resource bundles.\n\nNotice that the resource bundles and messages were externalized into separate files, they are just json files located under ./src/_data/l10n.\nEach language directory includes corresponding data file, with two entries: layout and locale, for example the English directory en includes the en.json file\n\nThe Localization in Templates\nNow, in the base template, you would define the language of the page\n&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;\nAnd provide links for all active languages\n\nThen anywhere in the template you can access the menu by locale\n\nAnd get the translation by locale\n\n{{ site[locale]._t.search }}\n\n\nCreating Localized Content\nTo create a content, all you need to do is to create a file, usually markdown file with front matter in the corresponding language directory.\nThe directory under language can be arbitrary, but the starter project includes pages and posts sub-directories. The former, posts, has the nature of increasing over time.\nYou will notice that any given collection will include contents of all languages. For example, collection.post will include, say English and Spanish.\nIn order to have language specific collections, .eleventy.js was modified to add configuration that adds collections per language. For example from collection.post will derive collection.posts_en and collection.posts_es.\n\nThis allows you to render English only posts. If you want to parameterize the language, you could do:\n\nI wish I could just access with collections.posts[locale].\nIn the midst of implementing my awesome multilingual Eleventy, I found out this nice article about multilingual sites, to which happened to use very similar techniques. The permalink idea in the article looks interesting.\n✔️ Requirement: Multilingual - Checked!\nSEO-Friendly\nThe objective of Search Engine Optimization (SEO) is to make the page such a way that the search engines such as Google, Bing, etc. can parse it and index it with useful information increasing the chance of the page to be found by people.\nSEO involves many things including proper meta tagging: proper wording for the description, appropriate keywords, good title; the proper usage of headings,  etc. I am not an expert, but there is a nice tool from WooRank that analyses your page. There is also a free chrome extension that does that.\nOne feature I have for Fundamenty is the generation of robots.txt and sitemap.xml The generation is done through the template files ./src/robots-txt.njk and ./src/sitemap-xml.njk.\nBoth templates are quite simple\n./src/robots-txt.njk\n\nAnd ./src/sitemap-xml.njk\n\nBoth relies on the rootUrl data defined in site.js\n\n✔️ Requirement: Basic SEO - Checked!\nIn next articles, I will explain how I addressed my other requirements: search, analytics, automated deployment (continuous deployment) and others.\n&quot;"
    },
  
    {
      "title": "Como crear sitio à la SSG con Fundamenty y Eleventy en 15 minutos",
      "lang": "es",
      "tags": "post,despliegue",
      "url": "/es/posts/2020/2020-07-22-crear-sitio-con-fundamenty-eleventy/",
      "keywords": "website, gitlab",
      "objectID": "/es/posts/2020/2020-07-22-crear-sitio-con-fundamenty-eleventy/",
      "content": "&quot;En el artículo anterior tocamos el tema de JAMStack (Java, API, Markup), Static Site Generator (SSG) y sus ventajas.\nEn este artículo explicaremos como crear un sitio web utilizando Fundamenty, el proyecto de generación de sitio estático (SSG) web basado en una herramienta llamada Eleventy.\nFundamenty es un proyecto creado por nosotros que provee las siguientes características:\n\nSoporte de multilenguas\nIntegración con motor de busqueda Algolia (autocomplete).\nGoogle Analytics.\nFuncionalidad de editar en GitLab/GitHub.\nGeneración de los archivos robots.txt y sitemap.xml para SEO.\nGitHub Actions script para instalar en GitHub Pages de manera automatizada.\nGitLab-CI script para instalar on GitLab Pages de manera automatizada.\nIntegración con servicio de comentario Disqus\n\nPre-requisitos\nAsumiendo que  si usted tiene acceso al internet, pues está leyendo esta página web, el único  requisito es tener instalado nodejs en su computadora.\nSi desea publicar el sitio en internet, GitLab pages, también es necesario git.\nInstalación de Fundamenty\nLo primero que haremos es descargar el proyecto Fundamenty del GitHub. (Si tiene git, puede descargar fácilmente clonar el proyecto y eliminar el directorio .git)\nMueva el archivo descargado a la carpeta deseada, descomprima el archivo y modifique el nombre de la carpeta con el nombre que usted desee.\nAbra una la ventana de comando (también llamado terminal) y diríjase al directorio donde descomprimió el proyecto.\nEjecute el siguiente comando para instalar las librerías. Esto tomará algo de tiempo para descargar librerias de internet. Y ocupará aproximadamente 100MB de disco:\n\nUna vez completado la instalación proceda a ejecutar el comando para correr el servidor:\n\nSi la instalación fue exitosa, usted verá un mensaje similar a lo siguiente:\n\nEsto significa que el servidor esta corriendo y la sitio web está listo para ser accedido localmente.\nAbra con su navegador la dirección: http://localhost:8080/\nSi puede ver una página como siguiente, estamos en buen camino.\n\nPersonalizando el sitio.\nLo primero que haremos es cambiar el las configuraciones del proyecto del nodejs.\nAbra con un editor el archivo package.json, y modifique los siguientes valores:\n\n\nNota: NOMBRE_DEL_PROJECTO no debe de tener espacios ni caracteres especiales.\n\nEjecute npm run build_and_serve nuevamente para asegurar que package.json no tenga errores, y verifique que http://localhost:8080 despliegue correctamente. Presione Ctrl+c para parar el servicio.\nAhora modificaremos la configuración del sitio, abra con su editor el archivo .fundamenty.yml y cambie los valores debidamente\n\nSi no sabe los valores de los variables en mayúsculas, no se preocupe, déjelos en blanco.\nAhora ejecute el siguiente comando:\n\nEl comando habrá generado dos archivos: ./src/_data/site.json.gen y ./.env.gen.\nCambie los nombres de los archivos removiendo la extensión .gen, por ejemplo ./.env.gen a ./.env. Tendrá que remover el archivo original ./src/_data/site.json\nAl ejecutar npm run build_and_serve, y abrir la página, notará los cambios realizados, como el nombre.\nAhora estamos listos para agregar contenidos!\nAgregando Contenidos\nEn el directorio ./src/{lenguaje}, existen dos sub-directorios: pages y posts. El sub-directorio pages es para paginas de secciones que generalmente no cambia a menudo. Mientras que el sub-directorio posts es para contenidos que va creciendo, por ejemplo artículos de blogs. Cada artículo es representado en un archivo independiente.\nLos dos sub-directorios son convenciones cuales usted puede cambiar si desea. Lo que si importa es el archivo dentro del subdirectorio con el mismo nombre pero en extensión .json que incluye metadata. Por ejemplo el archivo es/posts/posts.json es\n\nIndicando que los archivos en este directorio y subdirectorios utiliza el layout definido y es de tipo “post”.\nCada pagina o articulo es un archivo tipo Markdown (.md). Un ejemplo de una página:\n\nAbajo es un ejemplo de de un artículo (post)\n./es/posts/mi-primer-articulo.md\n\nNótese los datos envueltos entre ---. Esa sección en el archivo se llama front-matter e incluye datos utilizados por el procesador de contenidos.\nPor ejemplo, el title es utilizado para desplegar título de la página, el date es utilizado para ordenar la lista de artículos, etc.\nPersonalizando el diseño\n\nPara personalizar el diseño, es necesario conocimiento básico de HTML y CSS, plantilla Nunjucks, aunque si prefiere, puede cambiar el motor de plantilla a otro.\n\nEl diseño de la página viene de las plantillas ubicadas en ./src/_includes/layouts.\nLa plantilla base es el base.njk.\nEleventy básicamente funciona de la siguiente manera: Al hacer build,  Eleventy atraviesa cada carpeta recursivamente exceptuando las carpetas especiales como _data y _includes y por cada archivo que encuentra, procesa con el motor de plantilla basado en la extensión del archivo y va incluyendo el layout definido en el front-matter o en el dato de la carpeta.\nPor ejemplo, es/posts/mi-primer-articulo.md ejecuta el procesador de Markdown para generar el HTML\n\nPero como en es/posts/posts.json está indicando que use el layout layouts/post.njk ejecutará el motor de plantilla en ella y unirá con el HTML generado del mi-primer-articulo.md\nAsi el Eleventy genera archivos HTML para cada uno de los archivos fuentes y los deposita en el directorio ./_site.\nEn fin, para cambiar el diseño, lo que hay que hacer es modificar los archivos dentro del ./src/_includes/layouts/. La plantilla base es base.njk\nInstalando en GitLab\nEl proyecto ya incluye el GiLab-CI script (.gitlab-ci.yml) para instalar en GitLab Pages. Para más detalle siga las instrucciones en el artículo anterior. /es/posts/2020/2020-07-03-publicar-gitlabpages/\nSi es primera vez usando git y GitLab, he aqui una guia rapida:\nPara crear repositorio en GitLab:\n\nIngrese a GitLab.com,\nEn la página principal, presione el boton verde New Project\nSeleccione Create Blank Project\nLlene el formulario del proyecto\n\nProject name: &amp;lt;El nombre del proyecto&amp;gt;,\nProject URL:\nProject slug: &amp;lt;al introducir el nombre, automaticamente se llenará esta parte&amp;gt;\nSeleccione Public para el Visibility Level\nNO chequee la opción Initialize repository with a README\nY luego presione el botón *Create Project”\n\n\nCuando muestre la pantalla, seguiremos la instrucción del Push an existing folder para inicializar y subir el sitio\n\nSi  no ha configurado git local con su identificación aun, siga las instrucciones que muestra en la página Git global setup\n\nPara inicializar y subir el sitio a GitLab\n\nDesde el directorio raíz del proyecto, ejecute los comandos que se muestra\n\n\nGitLab, al encontrar el archivo .gitlab-ci.yml automáticamente intentará instalar la el sitio a GitLab Pages. En este momento habrá instalado accesible a la direccion https://&amp;lt;su-cuenta&amp;gt;.gitlab.io/&amp;lt;nombre-proyecto&amp;gt;, pero cuando se navega a la direccion el sitio mostrara error 404 (Pagina No Encontrada). Esto se debe a que Fundamenty está redireccionando a la la ruta raíz en vez de &amp;lt;nombre-proyecto&amp;gt;\nPara arreglar esto:\n\nEn GitLab, diríjase a la página principal de su  proyecto.\nEn el menú izquierda, seleccione Settings que esta en el fondo.\nSeleccione sl sub-menu CI / CD\nEn la session titulado Variables, presione Expand\n\nPresione Add Variables\nEn el Key introduzca el valor WEB_PATH_PREFIX\nEn el Value introduzca como valor el nombre de su proyecto (tal como lo muestra la última parte del URL del projecto en GitLab, por ejemplo en mi caso el URL del proyeccto es https://gitlab.com/ysahnpark/mi-prueba, el nombre el projecto es mi-prueba\n\n\n\nPor cada cambio que realice y que haya verificado que el cambio fue correcto, comita los cambios al git:\n\nY cuando esté listo para subir, ejecute el siguiente comando:\n$git push origin\nPosiblemente necesite crear llaves ssh para el acceso a GitLab.\nSiga las instrucciones aqui: https://docs.gitlab.com/ee/ssh/#ed25519-ssh-keys y aqui https://docs.gitlab.com/ee/ssh/#ed25519-ssh-keys\nDe aquí en adelante, le d&quot;"
    }
  
]