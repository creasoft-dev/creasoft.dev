[
  
    {
      "title": "Para desarrollar una aplicación web ERP desde cero. ¿Qué tecnologías me recomendaría utilizar?",
      "lang": "es",
      "tags": "qna,programacion",
      "url": "/es/qna/2020/2020-07-20-tecnologias-para-desarrollo-web/",
      "keywords": "python, django",
      "objectID": "/es/qna/2020/2020-07-20-tecnologias-para-desarrollo-web/",
      "content": "&quot;Más detalle de la pregunta\nEstoy migrando mi aplicación desarrollado en VisualBasic para Windows a aplicación web más moderno.\n¿Qué  tecnologías me recomienda?\nHe visto que hay varias alternativas:\n\nDjango Rest framework. Con frontend en VueJS.\nDjango con su sistema de plantillas. (Yo empecé utilizando jQuery, pero luego de avanzar un poco veo que no es la mejor decisión.)\nDjango plantillas con VueJS. He visto alguna documentación sobre esto. No lo he intentado aún.\n\nY por último, ¿si desarrollo un frontend debería optar por SPA, PWA o SSR?\n- Desarrollador de ERP en plataforma de Windows en Panamá.\nRespuesta:\nLa pregunta es bastante abarcadora. Si la respuesta no le es suficiente o tiene preguntas adicionales,\npuede dejar comentarios y les daremos seguimiento.\nDesarrollo de aplicaciones web\nEmpecemos con la primera pregunta. Existen muchas otras alternativas de combinacion de lenguaje\ny framework: Python+Flask, Ruby on Rails, JS+express, JS+Koa, Java/Kotlin+Spring, Scala+Play, y la lista sigue.\nLos factores que hay que tomar en cuenta para la decisión incluye desde conocimiento previo del\nlenguaje/framework, el ecosistema  de las librerías, el soporte de la plataforma donde se instalará\nentre otros.\nPero entiendo que Python y Django son decisiones ya tomadas, que\npor cierto son buenas decisiones. Así que basaremos en esa decision.\nPara una aplicación ERP Web, Python+Django es una buena opción.\nPython tiene una comunidad activa con muchas librerias.\n¿SPA, PWA o SSR?\nExisten varios modelos de desarrollo para la parte de client (front-end):\n\n\nSingle Page Application (SPA) - Aplicación de Página Única\nEn este modelo de aplicación, el front-end, es una sóla página HTML con JavaScript, que interactua\ncon el servidor para generar contenidos dinámicos.\nLa ventaja es que la experiencia del usuario se asemeja a la de una aplicación de desktop.\nGmail es un buen ejemplo. Muchas  de las partes de las aplicaciones son cargados dinámicamente,\nsin hacer una recarga / redirección entre página.\nLa desventaja es que el motor de búsqueda como Google no va a poder registar la pagina, pues no\npuede analizar el contenido dinámico generadod por JS. En pocas palabras, no es optimizado\npara motores de búsqueda (No SEO). También el desarrollo es más complejo, en la parte de integracion\npor API y seguridad.\nTechnologias utilizadas en SPA include los frameworks de interfaz de usuario (IU) como\nReact, Angular, Vue, o\nSvelte en la parte del cliente,\ny en la parte de servidor los frameworks para desarrollo basado en API, ya sea REST o\nGraphQL.\n\n\nServer Side Rendering (SSR) - Rendereo en el Servidor\nEl SSR es básicamente el metodo tradicional de uso de plantillas. Los  Server Pages como\nlos Active Server Pages (ASP) o Java Server Pages (JSP). También son SSR.\nLa ventaja de este modelo es que es amigable a los motores de búsqueda.\nY la implmentacion es mas sencilla, no necesita API, y seguridad es menos compleja.\nExiste un tipo de SSR que se ha popularizado recientemente con Nodejs. El SSR isomórfico (en inglés: isomorphic).\nes el modelo en donde el motor de pantilla es uno de los framewors IU usado en SPA como React, Vue, Angular, etc.\nLa ventaja de este modelo es que el desarrollador dispone de gran ecosistema de librerías\ny componentes del framework.\n\n\nProgressive Web Application (PWA) - Aplicación Progresiva de Web\nEste modelo es más bien un patrón que consiste en utilizar\n(a) HTTPS para conexión segura,\n(b) JS Service Workers para funcionamiento en línea y fuera de línea, y\n(c) archivo de manifiesto para empaquetamiento y descubrimiento de la aplicación.\nEste modelo es muy reciente y aún no son tantos los casos de uso.\nUna de las ventajas es carga rápida y ejecución aun cuando la aplicación está fuera de línea.\nLos app moviles serian los mmas benficiados.\n\n\nTambien existe el WebAssembly que permite cargar archivos binarios ejecutables in el navegador. Es una tecnología reciente.\nPara hacer más interesante, otro plano es el desarrollo de la aplicación móvil:\n\nNativo, e.j. Java o Kotlin en Andriod, y Swift en iOS, NativeScript, ReactNative.\nHibrido, e.j. Ionic, Cordova\nPlataformas de abstracción, e.j. Xamarin\n\nLa recommendación\nEn fin, si su plan es seguir creciendo su aplicación ERP para que en un futuro sea provisto como\nservicio (Software as a Service) y con múltiples aplicaciones clientes, e.j. Web y móvil, le recomiendo que desarrolle de manera desacoplada:\n\nImplemente el servidor (backend) con interface API, utilizando\nDjango REST Framework o Flask.\nImplemente el cliente (frontend) como SPA utilizando el framework UI, e.j. Vuejs (es uno de los mas simpmles en aprender).\nImplemente seguridad, e.j. utilizando mecanismo de Bearer token.\nNo hace falta usar SSR, pues los contenidos del ERP deben estar protejidos y no ser encontrado por Google o por otros motores de búsqueda.\nTampoco hace falta usar PWA, pues el enfoque por mientras no es en aplicación móvil.\n\nSi necesita desarrollo rápido, el modelo tradicional utilizacion de la plantilla - e.j. Django template,\npues no necesita implementar API, y la implementación de seguridad es más sencilla.\nLa otra posibilidad es empezar con una fase intermedio, utilizando framework IU como Vuejs con\nla plantilla Django. Los datos, en vez de traer por API del servidor, simplemente puede generar con la plantilla en formato JSON utilizando el filtro json_script de Django.\nLo que también tendrá que hacer es evitar el conflicto del sintaxis `` que es igual\nen las dos plantillas - Django y Vuejs. No he averiguado, pero dbe haber configución para cambiar los caracteres.\nEs mejor empezar con algo sencillo que provee funcionalidad al usuario en corto plazo y poder\nvalidar dicha funcionalidad, en vez de tratar de implementar algo con las últimas tecnologías y técnicas\nque toma demasiado tiempo cual podria perder oportunidades en el mercado.\nUso de herramientas como git y aplicación de prácticas de CI-CD son d mucha ayuda en la evolución del diseño de su sistema.\nEspero que le haya servido la respuesta.\n&quot;"
    }
  
]